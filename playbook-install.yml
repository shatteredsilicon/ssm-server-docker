---
- hosts: all
  become: yes
  gather_facts: yes

  tasks:
    - name: Packages                   | Add SSM repository
      when: ansible_os_family == 'RedHat'
      copy:
        dest: /etc/yum.repos.d/ssm.repo
        content: |
          [ssm]
          name=SSM repo
          baseurl=https://dl.shatteredsilicon.net/ssm/$releasever/RPMS/$basearch/
          gpgkey=https://dl.shatteredsilicon.net/ssm/$releasever/RPM-GPG-KEY-SSM-EL$releasever
          gpgcheck=1
          enabled=0

    - name: Packages                   | Install OS tools
      when: ansible_os_family == 'RedHat'
      shell: microdnf -y install --nodocs --noplugins --best {{ item }}
      with_items:
        - supervisor
        - logrotate
        - python3-pip
        - cronie
        - yum-utils

    - name: Packages                   | Add hashicorp repo
      shell: yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo

    - name: cloud-init                 | Create dirs
      file: path={{ item }} state=directory
      with_items:
        - /var/lib/cloud/scripts/per-once
        - /var/lib/cloud/scripts/per-boot

    - name: Percona Server for MySQL   | Install Python Modules
      when: ansible_os_family == 'RedHat'
      pip:
        name:
          - requests
          - PyMySQL
        extra_args: --user
        executable: pip3

    - name: Percona Server for MySQL   | stat /root/.my.cnf
      stat: path=/root/.my.cnf
      register: root_mycnf_file

    - name: Percona Server for MySQL   | Add password generator script
      when: not root_mycnf_file.stat.exists
      copy:
        content: |
          #!/bin/sh

          TEMP_PASS=$(grep 'temporary password' /var/log/mysqld.log  | sed -e 's/.*localhost: //' | tail -1)
          NEW_PASS=$(dd if=/dev/urandom bs=1 count=256 2>/dev/null | tr -cd '[:alnum:],.!@#$%^&*' | head -c32)
          mysql "-p${TEMP_PASS}" --connect-expired-password -e "SET PASSWORD = PASSWORD('$NEW_PASS');"
          echo "[client]
          password = '$NEW_PASS'" > /root/.my.cnf
          echo "
          ++++++++++++++++++++++++++ Percona Server for MySQL ++++++++++++++++++++++++++
            Setting password for root@localhost user: $NEW_PASS
          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          " | tee -a /var/log/mysqld.log
        dest: /var/lib/cloud/scripts/per-once/init-mysql-password
        mode: 0755

    - name: SSM                        | Create grafana group
      group:
        gid: 472
        name: grafana

    - name: SSM                        | Create grafana user
      user:
        uid: 472
        name: grafana
        group: grafana
        home: /var/lib/grafana
        shell: /sbin/nologin

    - name: SSM                        | Add local YUM repository
      when: ansible_os_family == 'RedHat'
      copy:
        dest: /etc/yum.repos.d/local.repo
        content: |
          [local]
          name=Local repo
          baseurl=file:///tmp/RPMS
          gpgcheck=0
          enabled=0

    - name: SSM                        | Install RPMs
      when: ansible_os_family == 'RedHat'
      shell: microdnf -y --enablerepo local --enablerepo ssm install --nodocs --noplugins --best {{ item }}
      with_items:
        - nginx
        - consul
        - grafana
        - prometheus
        - ssm-qan-api
        - ssm-qan-app
        - percona-toolkit-ssm-minimal
        - ssm-dashboards
        - ssm-server
        - ssm-client
        - ssm-manage
        - ssm-managed
        - rds_exporter
        - snmp_exporter

    - name: SSM                        | Install MariaDB 10.4
      when: ansible_os_family == 'RedHat'
      shell: microdnf -y --enablerepo local --enablerepo ssm install --nodocs --noplugins --best MariaDB-server MariaDB-client

    - name: NGINX SSL Certificate      | Add script
      copy:
        content: |
          #!/bin/sh

          set -o errexit

          mkdir -p /srv/nginx

          if [ ! -e /srv/nginx/dhparam.pem ]; then
              openssl dhparam -out /srv/nginx/dhparam.pem 2048
          fi

          if [ ! -e /srv/nginx/ca-certs.pem ]; then
              # Fetch letsencrypt chain
              curl https://letsencrypt.org/certs/isrgrootx1.pem                          > /srv/nginx/ca-certs.pem
              curl https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.pem       >> /srv/nginx/ca-certs.pem
              curl https://letsencrypt.org/certs/letsencryptauthorityx1.pem             >> /srv/nginx/ca-certs.pem
              curl https://www.identrust.com/certificates/trustid/root-download-x3.html >> /srv/nginx/ca-certs.pem
          fi

          if [ ! -e /srv/nginx/certificate.conf ]; then
              echo "
          [ req ]
          distinguished_name = req_distinguished_name
          prompt             = no

          [ req_distinguished_name ]
          O                  = Main Org.
          " > /srv/nginx/certificate.conf
          fi

          if [ ! -e /srv/nginx/certificate.key -o ! -e /srv/nginx/certificate.crt ]; then
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                  -keyout /srv/nginx/certificate.key \
                  -out    /srv/nginx/certificate.crt \
                  -config /srv/nginx/certificate.conf
          fi
        dest: /var/lib/cloud/scripts/per-boot/generate-ssl-certificate
        mode: 0755

    - name: NGINX SSL Certificate      | Check certificate file
      stat: path=/srv/nginx/certificate.crt
      register: certificate_file

    - name: NGINX SSL Certificate      | Generate certificate
      when: not certificate_file.stat.exists
      command: /var/lib/cloud/scripts/per-boot/generate-ssl-certificate

    - name: Grafana                    | Check data dir
      stat: path=/srv/grafana/grafana.db
      register: grafana_db

    - name: Grafana                    | Enable Anonymous access
      when: not grafana_db.stat.exists
      community.general.ini_file:
        path: /etc/grafana/grafana.ini
        section: auth.anonymous
        option: enabled
        value: true

    - name: Grafana                    | Enable Anonymous access
      when: not grafana_db.stat.exists
      community.general.ini_file:
        path: /etc/grafana/grafana.ini
        section: auth.anonymous
        option: org_role
        value: Editor

    - name: Grafana                    | Set snapshot server
      when: not grafana_db.stat.exists
      community.general.ini_file:
        path: /etc/grafana/grafana.ini
        section: snapshots
        option: external_enabled
        value: false

    - name: Grafana                    | Set snapshot server
      when: not grafana_db.stat.exists
      community.general.ini_file:
        path: /etc/grafana/grafana.ini
        section: snapshots
        option: external_snapshot_url
        value: http://127.0.0.1

    - name: Grafana                    | Set snapshot server
      when: not grafana_db.stat.exists
      community.general.ini_file:
        path: /etc/grafana/grafana.ini
        section: snapshots
        option: external_snapshot_name
        value: Share with Shattered Silicon

    - name: Grafana                    | Set plugins
      when: not grafana_db.stat.exists
      community.general.ini_file:
        path: /etc/grafana/grafana.ini
        section: plugins
        option: allow_loading_unsigned_plugins
        value: pmm-app,pmm-add-instance-app-panel,pmm-qan-app-panel,pmm-qan-settings-app-panel,pmm-remote-instances-panel,pmm-singlestat-panel,pmm-system-summary-app-panel,pmm-update-panel,ssm-filtertable-panel

    - name: Grafana                    | Set DATA_DIR
      when: not grafana_db.stat.exists
      community.general.ini_file:
        path: /etc/sysconfig/grafana-server
        option: DATA_DIR
        value: /srv/grafana

    - name: supervisor                 | Fix credentials
      community.general.ini_file:
        path: /etc/supervisord.conf
        section: supervisorctl
        option: username
        value: dummy

    - name: supervisor                 | Fix credentials
      community.general.ini_file:
        path: /etc/supervisord.conf
        section: supervisorctl
        option: password
        value: dummy
